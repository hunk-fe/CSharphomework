<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="这篇文章总结一下我认为面试中最应该掌握的关于基本类型和引用类型的面试题目。 面试题目1：值传递与引用传递 对于没有接触过C&#x2B;&#x2B;这类有引用传递的Java程序员来说，很容易误将引用类型的参数传递理解为引用" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Java面试系列第1篇-基本类型与引用类型 - 归去来兮辞 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/coffee/bundle-coffee.min.css?v=pdMIVgsH8kXt-vOWnlL0N20TlHt3UyP9HzGgocfsP4s" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.min.css?v=na9bpAY4yh7uEWCcrXj3vfJM3VBse8YtU6-5fUUQPz0" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/extjs4/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/extjs4/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/extjs4/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 157750;
        var currentBlogApp = 'extjs4';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'coffee';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/extjs4/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/extjs4/">归去来兮</a>
</h1>
<h2>
只有非常努力，才能看起来毫不费力
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li>
</li>
	<li>

</li>
	<li>


</li>
	<li>
</li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>

	
</li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
4&nbsp;
文章- 
34&nbsp;
评论- 
20&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/extjs4/p/12771859.html">Java面试系列第1篇-基本类型与引用类型</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>&nbsp;这篇文章总结一下我认为面试中最应该掌握的关于基本类型和引用类型的面试题目。</p>
<h3>面试题目1：值传递与引用传递</h3>
<p>对于没有接触过C++这类有引用传递的Java程序员来说，很容易误将引用类型的参数传递理解为引用传递，而基本类型的传递理解为值传递，这是错误的。要理解值传递与引用传递，首先要理清值传递、引用传递与指针传递三个概念。</p>
<p>值传递与引用传递最重要的就是看在传递的过程中，值是否发生了复制。在Java中没有指针的概念，但是引用类型做为参数进行传递时，JVM将其实现为指针传递，那么重点就是搞清楚指针传递到底是值传递还是引用传递了。指针在传递时也会复制，所以是值传递，Java中不存在引用传递。&nbsp;</p>
<h3>面试题目2：int类型的范围</h3>
<p>Java中4种基本类型表示的范围如下图所示。</p>
<p><img src="https://img2020.cnblogs.com/blog/1236123/202004/1236123-20200425081124386-112579641.png" alt="" width="447" height="111"></p>
<p>Java中不能明确指示某个数为无符号类型，所以最高位一般为符号位。拿占一个字节的byte来说，由于最高位需要表示符号，所以只能用剩下的7位来表示数。所以最大可表示的数为</p>
<p>0111 1111（二进制）</p>
<p>max = (2^0+2^1+2^2+...+2^6) = 127</p>
<p>最小可表示数的范围用二进制表示应该为：</p>
<p>1111 1111（二进制）</p>
<p>但是对于计算机来说，负数其实是用补码表示的，也就是反码加1，所以在计算机中存储的二进制为1000 0001（补码），这个值才是-127。</p>
<p>我们要对待一种特殊情况，如下：</p>
<p>1000 0000（原码）</p>
<p>1111 1111（反码）</p>
<p>1000 0000（补码）</p>
<p>如果1000 0000表示0的话，那岂不是有了0和-0之分了，所以可以用1000 0000表示-128。</p>
<p>由于符号位的存在，所以在许多的情况下，我们其实只是想保持二进制位的原样，而不是十进制的值。举个例子如下：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">public static void main(String[] args) {
	byte b = -127;//10000001
	int a =  b;
	System.out.println(a);
	a =  b &amp; 0xff;
	System.out.println(a);
}
</pre>
</div>
<p>输出结果-127,129。</p>
<p>byte类型在转换为int类型时，符号位发生扩展，所以第一次打印a的值时，十进制保持一致，二进制表示为</p>
<p>1111 1111 1111 1111 1111 1111 1000 0001</p>
<p>现在将b和&amp;0xff做与后，十进制已经无法保持一致，因为此时的二进制表示为</p>
<p>0000 0000 0000 0000 0000 0000 1000 0001</p>
<p>这个值是129。有什么用呢？其实在实际操作中，我们经常看到读取字节流时，转换过程中要加&amp;0xff，就是为了保持二进制的原有样子，因为此时关注的并不是十进制值。&nbsp;</p>
<h3>面试题目3：Java中对基本类型的赋值是原子操作吗？引用类型呢？</h3>
<p>根据虚拟机规范：（<a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.7">https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.7</a>）</p>
<blockquote>
<p class="norm">For the purposes of the Java programming language memory model, a single write to a non-volatile&nbsp;<code class="literal">long</code>&nbsp;or&nbsp;<code class="literal">double</code>&nbsp;value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write.</p>
<p class="norm"><a name="jls-17.7-110"></a>Writes and reads of volatile&nbsp;<code class="literal">long</code>&nbsp;and&nbsp;<code class="literal">double</code>&nbsp;values are always atomic.</p>
<p class="norm"><a name="jls-17.7-120"></a>Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values.</p>
<p class="note">Some implementations may find it convenient to divide a single write action on a 64-bit&nbsp;<code class="literal">long</code>&nbsp;or&nbsp;<code class="literal">double</code>&nbsp;value into two write actions on adjacent 32-bit values. For efficiency's sake, this behavior is implementation-specific; an implementation of the Java Virtual Machine is free to perform writes to&nbsp;<code class="literal">long</code>&nbsp;and&nbsp;<code class="literal">double</code>&nbsp;values atomically or in two parts.</p>
<p class="note">Implementations of the Java Virtual Machine are encouraged to avoid splitting 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as&nbsp;<code class="literal">volatile</code>&nbsp;or synchronize their programs correctly to avoid possible complications.</p>
</blockquote>
<p>Java虚拟机规范表示，Java 基础类型中，long 和 double 是 64 位长的。32 位架构 CPU 的算术逻辑单元（ALU）宽度是 32 位的，在处理大于 32 位操作时需要处理两次。所以有可能在读long的高32位时，低32位被另外一个并发的线程写了，读出的值可就谁也说不准了。对于引用类型来说是原子操作。</p>
<p>举个例子如下：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:false;">public class P1 {
	private long b = 0;
	
	public void set1() {
		b = 0;
	}
	
	public void set2() {
		b = -1;
	}
	
	public void check() {
		System.out.println(b);	
		if (0 != b &amp;&amp; -1 != b) {
			System.err.println("Error");
		}
	 }
}
</pre>
</div>
<p>在32位下跑这个程序，可能会打印Error，原因就是上面提到的。引起这个问题的最主要原因就是并发，所以如果要解决这个问题，可以让线程序列化访问b，也就是通过加锁来实现；可以使用AtomicLong对长整形进行原子操作；根据虚拟机规范所说，还可以加volatile关键字。</p>
<p>这里只所以volatile关键字能解决这个原子性，其实还是因为为了保证可见性而对内存进行了独占访问，这样在独占操作时，就不会有其它线程改写其中的值了。&nbsp;</p>
<h3>面试题目4：关于字符串的面试题</h3>
<p>首先来看一下下面的面试题：</p>
<p>另外一个高频的问题就是字符串创建了多少个对象的问题，如下：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">String str = new String("ab");
</pre>
</div>
<p>上面一行代码将会创建1或2个字符串。如果在字符串常量池中已经有一个字符串&ldquo;ab&rdquo;，那么就只会创建一个&ldquo;ab&rdquo;字符串。如果字符串常量池中没有&ldquo;ab&rdquo;，那么首先会在字符串池中创建，然后才在堆内存中创建，这种情况就会创建2个对象。　　</p>
<p>再来看一下下面的面试题：&nbsp;</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">String a = "ab"; 
String b = "a" + "b"; 
a == b
</pre>
</div>
<p>如上的代码会对b进行常量折叠，所以相当于如下程序：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:false;">String a = "ab"; 
String b = "ab"; 
System.out.println(a == b)</pre>
</div>
<p>对于Java来说，==对基本类型比较的是值，而对于引用类型比较的是地址，所以要想让a==b输出true，那只能a和b指向同一个对象。"ab" 属于字符串字面量，因此编译时期会在常量池中创建一个字符串对象，如果常量池中已经存在该字符串对象则直接引用，所以最终的结果为true。</p>
<p>String类型的常量池比较特殊。它的主要使用方法有两种：</p>
<p>（1）直接使用双引号声明出来的String对象会直接存储在常量池中。<br />（2）如果不是用双引号声明String对象，可以使用 String 提供的 intern()方法。它的作用是： 如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用； 如果没有，则在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用。</p>
<p>举个例子如下：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">String s1 = new String("ab");// s1保存堆中的引用
String s2 = s1.intern();     // s2保存的是字符串常量池中的引用
String s3 = "ab";            // s3保持的是字符串常量池中的引用
System.out.println(s1 == s2);// false，因为一个是堆内存中的String对象一个是常量池中的String对象，
System.out.println(s2 == s3);// true， s1,s2指向常量池中的&rdquo;ab&ldquo;
</pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>&nbsp;</h3>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2020-04-25 10:40</span>&nbsp;
<a href="https://www.cnblogs.com/extjs4/">归去来兮辞</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12771859" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12771859);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 157750, cb_blogApp = 'extjs4', cb_blogUserGuid = 'bb5602fd-e5fc-df11-ac81-842b2b196315';
    var cb_entryId = 12771859, cb_entryCreatedDate = '2020-04-25 10:40', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 归去来兮辞
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>