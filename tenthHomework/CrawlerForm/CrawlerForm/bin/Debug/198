<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="HashMap简介 HashMap是Java中一中非常常用的数据结构，也基本是面试中的“必考题”。它实现了基于“K V”形式的键值对的高效存取。JDK1.7之前，HashMap是基于数组&#x2B;链表实现的，" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>手写一个简单的HashMap - 周周zzz - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=1ssrnY3Il79Ok472qeVrpxlSprSXcHhYPgZC5S3wtVM" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/2511zzZ/custom.css?v=RFVU5pnTT2tN7UbZdIExMfD5wA4=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/2511zzZ/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/2511zzZ/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/2511zzZ/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 587498;
        var currentBlogApp = '2511zzZ';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/2511zzZ/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/2511zzZ/">zzZ</a>
</h1>
<h2>
Catch The Rainbow
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/2511zzZ/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%91%A8%E5%91%A8zzz">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/2511zzZ/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
4&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
5</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/2511zzZ/p/12770864.html">手写一个简单的HashMap</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="hashmap简介">HashMap简介</h2>
<p>HashMap是Java中一中非常常用的数据结构，也基本是面试中的“必考题”。它实现了基于“K-V”形式的键值对的高效存取。JDK1.7之前，HashMap是基于数组+链表实现的，1.8以后，HashMap的底层实现中加入了红黑树用于提升查找效率。</p>
<p>HashMap根据存入的键值对中的key计算对应的index，也就是它在数组中的存储位置。当发生哈希冲突时，即不同的key计算出了相同的index，HashMap就会在对应位置生成链表。当链表的长度超过8时，链表就会转化为红黑树。</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/2511zzZ/1747272/o_200424151204HashMap.png" alt="image-20200424212525490"></p>
<p>手写HashMap之前，我们讨论一个小问题：当我们在HashMap中根据key查找value时，在数组、链表、红黑树三种情况下，平均要做多少次比较？</p>
<blockquote>
<p>在数组中查找时，我们可以通过key的hashcode直接计算它在数组中的位置，比较次数为1</p>
<p>在链表中查找时，根据next引用依次比较各个节点的key，长度为n的链表节点平均比较次数为n/2</p>
<p>在红黑树中查找时，由于红黑树的特性，节点数为n的红黑树平均比较次数为log(n)</p>
</blockquote>
<p>前面我们提到，链表长度超过8时树化（TREEIFY），正是因为n=8，就是log(n) &lt; n/2的阈值。而n&lt;6时，log(n) &gt; n/2，红黑树解除树化（UNTREEIFY）。另外我们可以看到，想要提高HashMap的效率，最重要的就是尽量避免生成链表，或者说尽量减少链表的长度，避免哈希冲突，降低key的比较次数。</p>
<h2 id="手写hashmap">手写HashMap</h2>
<h3 id="定义一个map接口">定义一个Map接口</h3>
<p>也可以使用Java中的<code>java.util.Map</code></p>
<pre><code class="language-Java">public interface MyMap&lt;K,V&gt; {

    V put(K k, V v);

    V get(K k);

    int size();

    V remove(K k);

    boolean isEmpty();

    void clear();
}
</code></pre>
<p>然后编写一个MyHashMap类，实现这个接口，并实现里面的方法。</p>
<h3 id="成员变量">成员变量</h3>
<pre><code class="language-Java">    final static int DEFAULT_CAPACITY = 16;
    final static float DEFAULT_LOAD_FACTOR = 0.75f;

    int capacity;
    float loadFactor;
    int size = 0;

    Entry&lt;K,V&gt;[] table;
</code></pre>
<pre><code>class Entry&lt;K, V&gt;{
    K k;
    V v;
    Entry&lt;K,V&gt; next;

    public Entry(K k, V v, Entry&lt;K, V&gt; next){
        this.k = k;
        this.v = v;
        this.next = next;
    }
}
</code></pre>
<p>我们参照HashMap设置一个默认的容量capacity和默认的加载因子loadFactor，table就是底层数组，Entry类保存了&quot;K-V&quot;数据，next字段表明它可能会是一个链表节点。</p>
<h3 id="构造方法">构造方法</h3>
<pre><code class="language-Java">public MyHashMap(){
    this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
}

public MyHashMap(int capacity, float loadFactor){
    this.capacity = upperMinPowerOf2(capacity);
    this.loadFactor = loadFactor;
    this.table = new Entry[capacity];
}
</code></pre>
<p>这里的<code>upperMinPowerOf2</code>的作用是获取大于capacity的最小的2次幂。在HashMap中，开发者采用了更精妙的位运算的方式完成了这个功能，效率比这种方式要更高。</p>
<pre><code class="language-Java">private static int upperMinPowerOf2(int n){
    int power = 1;
    while(power &lt;= n){
        power *= 2;
    }
    return power;
}
</code></pre>
<p>为什么HashMap的capacity一定要是2次幂呢？这是为了方便HashMap中的数组扩容时已存在元素的重新哈希（rehash）考虑的。</p>
<h3 id="put方法">put方法</h3>
<pre><code class="language-Java">@Override
public V put(K k, V v) {
    // 通过hashcode散列
    int index = k.hashCode() % table.length;
    Entry&lt;K, V&gt; current = table[index];
    // 判断table[index]是否已存在元素
    // 是
    if(current != null){
        // 遍历链表是否有相等key, 有则替换且返回旧值
        while(current != null){
            if(current.k == k){
                V oldValue = current.v;
                current.v = v;
                return oldValue;
            }
            current = current.next;
        }
        // 没有则使用头插法
        table[index] = new Entry&lt;K, V&gt;(k, v, table[index]);
        size++;
        return null;
    }
    // table[index]为空 直接赋值
    table[index] = new Entry&lt;K, V&gt;(k, v, null);
    size++;
    return null;
}
</code></pre>
<p>put方法中，我们通过传入的K-V值构建一个Entry对象，然后判断它应该被放在数组的那个位置。回想我们之前的论断：</p>
<blockquote>
<p>想要提高HashMap的效率，最重要的就是尽量避免生成链表，或者说尽量减少链表的长度</p>
</blockquote>
<p>想要达到这一点，我们需要Entry对象尽可能均匀地散布在数组table中，且index不能超过table的长度，很明显，取模运算很符合我们的需求<code>int index = k.hashCode() % table.length</code>。关于这一点，HashMap中也使用了一种效率更高的方法——通过&amp;运算完成key的散列，有兴趣的同学可以查看HashMap的源码。</p>
<p>如果table[index]处已存在元素，说明将要形成链表。我们首先遍历这个链表（长度为1也视作链表），如果存在key与我们存入的key相等，则替换并返回旧值；如果不存在，则将新节点插入链表。插入链表又有两种做法：<code>头插法</code>和<code>尾插法</code>。如果使用尾插法，我们需要遍历这个链表，将新节点插入末尾；如果使用头插法，我们只需要将table[index]的引用指向新节点，然后将新节点的next引用指向原来table[index]位置的节点即可，这也是HashMap中的做法。</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/2511zzZ/1747272/o_200424151209headInsertTailInsert.png" alt="image-20200424223034753"></p>
<p>如果table[index]处为空，将新的Entry对象直接插入即可。</p>
<h3 id="get方法">get方法</h3>
<pre><code class="language-Java">@Override
public V get(K k) {
    int index = k.hashCode() % table.length;
    Entry&lt;K, V&gt; current = table[index];
    // 遍历链表
    while(current != null){
        if(current.k == k){
            return current.v;
        }
        current = current.next;
    }
    return null;
}
</code></pre>
<p>调用get方法时，我们根据key的hashcode计算它对应的index，然后直接去table中的对应位置查找即可，如果有链表就遍历。</p>
<h3 id="remove方法">remove方法</h3>
<pre><code class="language-java">@Override
public V remove(K k) {
    int index = k.hashCode() % table.length;
    Entry&lt;K, V&gt; current = table[index];
    // 如果直接匹配第一个节点
    if(current.k == k){
        table[index] = null;
        size--;
        return current.v;
    }
    // 在链表中删除节点
    while(current.next != null){
        if(current.next.k == k){
            V oldValue = current.next.v;
            current.next = current.next.next;
            size--;
            return oldValue;
        }
        current = current.next;
    }
    return null;
}
</code></pre>
<p>移除某个节点时，如果该key对应的index处没有形成链表，那么直接置为null。如果存在链表，我们需要将目标节点的前驱节点的next引用指向目标节点的后继节点。由于我们的Entry节点没有previous引用，因此我们要基于目标节点的前驱节点进行操作，即：</p>
<pre><code class="language-Java">current.next = current.next.next;
</code></pre>
<p>current代表我们要删除的节点的前驱节点。</p>
<p>还有一些简单的size()、isEmpty()等方法都很简单，这里就不再赘述。现在，我们自定义的MyHashMap基本可以使用了。</p>
<h2 id="最后">最后</h2>
<p>关于HashMap的实现，还有几点我们没有解决：</p>
<ol>
<li>扩容问题。在HashMap中，当存储的元素数量超过阈值（threshold = capacity * loadFactor）时，HashMap就会发生扩容（resize）,然后将内部的所有元素进行rehash，使hash冲突尽可能减少。在我们的MyHashMap中，虽然定义了加载因子，但是并没有使用它，capacity是固定的，虽然由于链表的存在，仍然可以一直存入数据，但是数据量增大时，查询效率将急剧下降。</li>
<li>树化问题（treeify）。我们之前讲过，链表节点数量超过8时，为了更高的查询效率，链表将转化为红黑树。但是我们的代码中并没有实现这个功能。</li>
<li>null值的判断。HashMap中是允许存null值的key的，key为null时，HashMap中的hash()方法会固定返回0，即key为null的值固定存在table[0]处。这个实现起来很简单，不实现的情况下MyHashMap中如果存入null值会直接报<code>NullPointerException</code>异常。</li>
<li>一些其他问题。</li>
</ol>
<p>相信大家自己完成了对HashMap的实现之后，对它的原理一定会有更深刻的认识，本文如果有错误或是不严谨的地方也欢迎大家指出。上述的问题我们接下来再逐步解决，至于红黑树，我也不会（摊手）。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 23:15</span>&nbsp;
<a href="https://www.cnblogs.com/2511zzZ/">周周zzz</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12770864" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12770864);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 587498, cb_blogApp = '2511zzZ', cb_blogUserGuid = '0cd8bbf7-32b9-4e2d-ced7-08d7cafa45e6';
    var cb_entryId = 12770864, cb_entryCreatedDate = '2020-04-24 23:15', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 周周zzz
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>